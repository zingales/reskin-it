// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  WHITE
  BLUE
  GREEN
  RED
  BLACK
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  displayName String?
  bio         String?
  avatarUrl   String?
  cardSets    CardSet[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Game {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  summary               String
  rules                 String                 // Markdown content
  cardDefinitionTables  GameCardDefinition[]   // Multiple card definition tables
  cardSets              CardSet[]              // Relation field (not loaded by default)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model GameCardDefinition {
  id          Int      @id @default(autoincrement())
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  name        String   // e.g., "Noble Cards", "Development Cards", "Resource Cards"
  description String   // Description of what this card type does
  tableName   String   // Reference to the actual table (e.g., "TokenEngineCardDefinition")
  decks       Deck[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([gameId, name])
}

model CardSet {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  gameId      Int
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  decks       Deck[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, userId])
}

model Deck {
  id                    Int                @id @default(autoincrement())
  name                  String
  description           String?
  cardSetId             Int
  cardSet               CardSet            @relation(fields: [cardSetId], references: [id], onDelete: Cascade)
  gameCardDefinitionId  Int
  gameCardDefinition    GameCardDefinition @relation(fields: [gameCardDefinitionId], references: [id], onDelete: Cascade)
  cardDefinitionIds     Int[]              // Array of row IDs from the specific card definition table
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@unique([name, cardSetId])
}

model TokenEngineCardDefinition {
  id          Int      @id @default(autoincrement())
  token       TokenType
  points      Int
  tier        Int
  cost        String   // JSON string for Map<TokenType, number>
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TokenEngineDiscoveryCardDefinition {
  id          Int      @id @default(autoincrement())
  points      Int
  cost        String   // JSON string for Map<TokenType, number>
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
