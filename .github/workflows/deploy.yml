name: Deploy to Production (https://reskin-it.vercel.app/)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_ENV: production

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.value }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --include=dev
        
      - name: Generate Prisma client
        run: | 
          echo "üîç Running Prisma Generate..."
          npm run prisma
          echo "‚úÖ Prisma Generate completed"
        
      - name: Type check
        run: |
          echo "üîç Running TypeScript type + lint checking..."
          npm run check
          echo "‚úÖ TypeScript check passed"
        
      - name: Build application
        run: |
          echo "üî® Building application..."
          npm run build
          echo "‚úÖ Build completed"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            prisma/
          retention-days: 1
          
      - name: Generate cache key
        id: cache-key
        run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "üöÄ Deploying to Vercel..."
          
          # Deploy to Vercel with environment variables
          npx vercel --prod --token $VERCEL_TOKEN --yes \
            --env DATABASE_URL="$DATABASE_URL" \
            --env JWT_SECRET="$JWT_SECRET" \
            --env NODE_ENV="production"
            
          echo "‚úÖ Deployment completed"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  database-setup:
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install minimal dependencies
        run: npm install @prisma/client prisma
        
      - name: Generate Prisma client
        run: npm run prisma
        
      - name: Test database connection
        run: |
          echo "üîç Testing database connection..."
          
          # Test connection with timeout
          timeout 30s npx prisma db execute --stdin --schema=./prisma/schema.prisma <<< "SELECT 1;" || {
            echo "‚ùå Database connection test failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Database connection test passed"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Run database migrations
        run: |
          echo "üîÑ Running Prisma migrations..."
          
          # Run migrations with timeout
          timeout 60s npx prisma migrate deploy --schema=./prisma/schema.prisma || {
            echo "‚ùå Migration failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Database migrations completed successfully"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Seed database
        run: |
          echo "üå± Running seed script..."
          
          # Run seed script with timeout
          timeout 120s npm run local:db:seed || {
            echo "‚ùå Seeding failed or timed out"
            exit 1
          }
          
          echo "‚úÖ Database seeding completed successfully"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  verify:
    runs-on: ubuntu-latest
    environment: production
    needs: [deploy, database-setup]
    
    steps:
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment by checking production endpoints..."
          
          # Wait a moment for deployment to be fully ready
          sleep 10
          
          # Test both API health and home page with retries
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES..."
            
            # Test the API health endpoint
            API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://reskin-it.vercel.app/api/health || echo "000")
            
            # Test the home page
            HOME_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://reskin-it.vercel.app/ || echo "000")
            
            if [ "$API_RESPONSE" = "200" ] && [ "$HOME_RESPONSE" = "200" ]; then
              echo "‚úÖ All health checks passed!"
              echo "üîç API health endpoint (HTTP $API_RESPONSE): https://reskin-it.vercel.app/api/health"
              echo "üîç Home page (HTTP $HOME_RESPONSE): https://reskin-it.vercel.app/"
              break
            else
              echo "‚ùå Health check failed:"
              echo "  - API health endpoint: HTTP $API_RESPONSE"
              echo "  - Home page: HTTP $HOME_RESPONSE"
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "‚ùå All health check attempts failed. Application may not be ready."
                echo "üîç Final response codes:"
                echo "  - API: $API_RESPONSE"
                echo "  - Home: $HOME_RESPONSE"
                exit 1
              fi
              
              echo "üîÑ Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
          
          echo "‚úÖ Deployment verification completed successfully"

  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, database-setup, verify]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ ${{ needs.build.result }} == 'success' ] && [ ${{ needs.deploy.result }} == 'success' ] && [ ${{ needs.database-setup.result }} == 'success' ] && [ ${{ needs.verify.result }} == 'success' ]; then
            echo "‚úÖ All deployment steps completed successfully"
            echo "üöÄ Application is live and ready"
          else
            echo "‚ùå Deployment failed in one or more steps:"
            echo "  - Build: ${{ needs.build.result }}"
            echo "  - Deploy: ${{ needs.deploy.result }}"
            echo "  - Database Setup: ${{ needs.database-setup.result }}"
            echo "  - Verify: ${{ needs.verify.result }}"
            exit 1
          fi
